---
description: frontend
globs: 
alwaysApply: false
---
# Frontend Rules for CARD-GAME

## Frontend Development Guidelines
- Use React functional components for all UI elements (e.g., `function CardComponent() { ... }`).
- Prefer TypeScript for type safety; all files should have a `.tsx` extension unless specified otherwise.
- Use kebab-case for file and folder names (e.g., `card-component.tsx`, `game-board/`).
- Follow Next.js conventions for routing and API calls (e.g., use `pages/` for routing, `fetch` for API requests).
- For backend API interactions, always use the URL defined in the environment variable `NEXT_PUBLIC_API_URL` (`http://localhost:8000` in development).
- Add loading states to components that fetch data from the backend (e.g., use `useState` for `isLoading`).
- Write unit tests for components using React Testing Library; place tests in a `__tests__/` folder (e.g., `card-component.test.tsx`).
- Use Tailwind CSS for styling, following utility-first principles (e.g., `className="flex justify-center p-4"`).
- Ensure accessibility (a11y) by adding ARIA labels and keyboard navigation to interactive elements (e.g., buttons, forms).
- Implement error boundaries for components that handle API calls to prevent app crashes (e.g., use `componentDidCatch` or `ErrorBoundary` from `react-error-boundary`).

## Feature-Specific Guidelines: Enhance Authentication and Registration Components
- **feat: Enhance authentication and registration components**
  - Add compatibility properties to `UserProfile` component for Django authentication (e.g., sync with JWT tokens from `rest_framework_simplejwt`).
  - Update `LoginForm` to handle token storage (e.g., store in `localStorage` or `context`) and error processing (e.g., display errors with `useState`).
  - Improve `PlayerRegistration` with loading states (e.g., `isLoading` with `useState`) and refined error handling (e.g., specific error messages for validation failures).
  - Configure global `axios` settings for authentication (e.g., add JWT headers) and error management (e.g., global error interceptor).
- These changes streamline user authentication and registration, improving overall user experience.

## Cross-Container Workflow
- Both `frontend` and `backend` code are accessible in each container (`card-game-frontend-1` and `card-game-backend-1`). Edit files directly in your IDE as needed.
- To inspect backend logic (e.g., API endpoints in `authentication/views.py`), view `/app/backend` files from the frontend container and adjust frontend code in `/app/frontend` accordingly.
- Example: If debugging a `LoginForm` API call, check the backend serializer in `/app/backend/authentication/serializers.py`, then refine the frontend logic in `/app/frontend`.
- Use `BrowserTools MCP` from the backend container to inspect browser activity (e.g., DOM state, API call effects on the UI) when needed.
- A single IDE instance (e.g., Cursor or VS Code) can edit both `/app/frontend` and `/app/backend` by opening the containerâ€™s `/app` directory.

## Do Not Start Any Servers
- Do not attempt to manually start servers within the containers; rely on the existing `docker-compose.yml` configuration to manage server processes.