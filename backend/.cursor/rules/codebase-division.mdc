---
description: frontend-access
globs: 
alwaysApply: false
---
# Backend Rules for CARD-GAME

## Code Division
- The project is split into two directories: `backend/` for Django backend code and `frontend/` for React/Next.js frontend code.
- Backend code (`backend/`) handles API logic, database interactions (Neo4j), caching (Redis), and server-side functionality. It serves the API at `http://localhost:8000`.
- Frontend code (`frontend/`) manages the user interface, client-side logic, and browser interactions. It runs on `http://localhost:3000` and communicates with the backend via API calls.
- When working in the backend container (`card-game-backend-1`), only edit files in `backend/`. Do not attempt to modify `frontend/` files directly, as they are not accessible in this container due to isolated mounts.
- To access frontend code or logic (e.g., for debugging UI rendering or client-side API calls), use the `FileSearch MCP` to search and view `frontend/` files without editing them. Example: Use `FileSearch MCP` to inspect `LoginForm.tsx` for frontend API call implementation.

## Backend Development Guidelines
- Use Django REST Framework (DRF) for API endpoints; define views in `views.py` and serializers in `serializers.py` (e.g., `authentication/views.py`).
- Prefer Python type hints for better code clarity (e.g., `def get_user(request: Request) -> Response:`).
- Use snake_case for file and variable names (e.g., `user_profile.py`, `get_user_data`).
- Follow Django’s MVT structure: models in `models.py`, views in `views.py`, and templates (if any) in `templates/`.
- For Neo4j interactions, use `django-neomodel` and define models in `models.py` (e.g., `class UserProfile(NodeModel): ...`).
- Use Redis for caching and Channels (e.g., via `channels_redis`); store cache keys in a `constants.py` file (e.g., `USER_CACHE_KEY = "user:{}"`).
- Implement logging for API endpoints using Django’s `logging` module (e.g., `logger.info("User logged in: %s", user_id)`).
- Write unit tests for API endpoints using Django’s `TestCase` and `rest_framework.test.APITestCase`; place tests in a `tests/` folder (e.g., `tests/test_auth.py`).
- Ensure proper error handling in views; return meaningful HTTP status codes (e.g., `400` for bad requests, `500` for server errors).

## Browser Access for Frontend
- To access or inspect frontend browser behavior (e.g., DOM, JavaScript execution), use the `BrowserTools MCP`.
- Example: If you need to check a frontend API call’s effect on the browser (e.g., how a token is stored), use `BrowserTools MCP` to inspect the browser session instead of guessing or modifying frontend code.
- Do not simulate browser behavior manually; rely on `BrowserTools MCP` for accurate frontend insights.

### Feature-Specific Guidelines: Enhance Authentication and Registration
- **feat: Enhance authentication and registration**
  - Update `UserProfile` model in `authentication/models.py` to include fields compatible with Django authentication (e.g., `email`, `last_login`).
  - Modify `LoginView` in `authentication/views.py` to return JWT tokens using `rest_framework_simplejwt` and handle validation errors (e.g., `400` for invalid credentials).
  - Enhance `PlayerRegistrationView` to include validation for unique usernames in Neo4j (e.g., use `UniqueValidator` or custom Neo4j query).
  - Configure DRF global settings in `settings.py` for authentication (e.g., `DEFAULT_AUTHENTICATION_CLASSES`) and error handling (e.g., custom exception handler).
- These changes improve backend support for authentication and registration, aligning with frontend enhancements.

### Cross-Boundary Workflow
- To implement features like authentication enhancements, use `BrowserTools MCP` to inspect frontend browser behavior (e.g., token storage in `LoginForm`) without editing frontend files directly.
- Example: If debugging an API response for `PlayerRegistration`, use `BrowserTools MCP` to check how the frontend renders validation errors, then adjust backend logic accordingly.
- For frontend-to-backend visibility, the frontend container (`card-game-frontend-1`) uses the `FileSearch MCP` to view backend code (e.g., API endpoints, serializers).
- Run two Cursor instances: one for `card-game-backend-1` (editing `backend/`) and one for `card-game-frontend-1` (editing `frontend/`). The overhead is acceptable for maintaining separation.